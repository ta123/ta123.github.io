<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[敏捷开发整体交付与局部交付]]></title>
    <url>%2F2017%2F08%2F14%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BA%A4%E4%BB%98%E4%B8%8E%E5%B1%80%E9%83%A8%E4%BA%A4%E4%BB%98%2F</url>
    <content type="text"><![CDATA[通勤路虽远，好在可以看看书。敏捷开发是把一个整体的可交付产品，分拆为一个个可交付产品包。 软件项目被划分为多个相互联系但也能独立运行的子项目； 举个栗子，比如一个产品有任务管理，文档管理功能，那么第一次交付任务管理，第二次交付文档管理，第三次交付任务与文档的关联。 再加上每个迭代的周期是1-4周，可以对上面进行二次甚至三次拆解； 但是需要注意，在计划每个迭代时，最终目标都是有可以发布的产品。这就要求在每个迭代中都有产品设计，开发，测试一个完整的流程，保证产品发布的可靠性；]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《轻松Scrum之旅-敏捷开发故事》有感]]></title>
    <url>%2F2017%2F08%2F12%2Fnew-article%2F</url>
    <content type="text"><![CDATA[1. 亡羊补牢为时不晚当已经发现知识跟不上生产力时，就要赶紧充电。老大说《时间的朋友》阐述了一个观点，人的思维是发散的，所以眼下的“无用知识”只不过缺少一个引爆点。人的认知是在不断积累的。 2. 敏捷管理最近开始看《轻松Scrum之旅-敏捷开发故事》。上一次接触scrum还是在PMP培训的时候，当时就对敏捷管理很感兴趣，遗憾的是里面只是简单的介绍，而在实际项目中也采用的瀑布流，所以一直没有实战的机会。自然也谈不上对scrum的了解。 2.1 几个重点 有明确的最高目标：发布产品； 每个Sprint都能看到实际的交付成果。 user story公式：作为&lt;某个角色&gt;，我可以&lt;做什么&gt;，以完成&lt;什么目的&gt;; 版本待办事项Sprint Backlog，用户故事User Story，任务task；其中 User Story 的度量方式：Story Point（人/日），理想状态下，一个人一天能够完成的工作量； 2.2 递进关系Sprint Backlog 拆解成User Story，每个User Story拆解成task；最后的task一定要细分到可以执行可以度量的；否则应该继续细分； 2.3 关于任务工时的看法很多人认为最难的是任务工时估算是最难的地方；包括我之前也这么认为；但是敏捷开发的思想在于监控和调整；比如当发现燃尽图持续横盘时，就应该考虑是否是任务拆解不够，或者工时估算有误，或者是执行人主观问题；从而对整体进度进行快速调整；这应该是一个动态过程，所以不用一开始就强调准确性；在这种执行到反馈到review的过程中，工时估算也就会越来越准确； 2.4 任务的状态未完成,被阻塞,进行中,已完成；敏捷管理将task分为这四种状态；管理者能够清晰看到当前每个人的工作任务； 作为敏捷管理软件，也应该围绕这个维度来进行展示和管理； 3. 结尾书看了2/3，结合工作，自己还是有很多疑问；比如story的Story Point和任务的工时怎么做对应，还是比较困惑。]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试与开发的平衡]]></title>
    <url>%2F2016%2F01%2F08%2F2016-1-8-some-up%2F</url>
    <content type="text"><![CDATA[引子最近涨了薪，提了干，做了新人培训，年关之前貌似一切都预示着2015年是个丰收年。 不过好在多年的工作经验已经对人生的这套把戏非常熟悉 福祸相依 越是看似美好的时候，就离危险越近； 保持谦逊和谨慎，是个良好的习惯，如果再能有一些危机感，那就更好了。 于是我把所有手头上的任务或者项目一个一个过了一遍，填填补补了不少漏洞，才稍微心安了一些。 果然，这两天就碰到了危机，服务器的开发遇到了阻塞，我跟php主管讨论了3次，每次都在40分钟以上，最后汇报给了需求方，由需求方最后做了定夺； 说起来好像平淡无奇，但是大家都知道越凶险的事情往往描述起来就越平淡。 如果这个阻塞解决不了，就意味着服务器部分的模块需要重构，而作为整个系统基石的服务器模块，如果重构将意味着整个项目都阻塞了，主营业务啊。 现在回想起来依旧心有余悸，如果之前不是自己把手头每个项目都认真的理了一遍，就不可能快速对这次阻塞反应，提出可能的解决方案，并在讨论的时候准确的根据之前准备好的异常案例，否了几个会上提出的看似能走通，实则更多坑的方案。 最终商定了一个可以落地的解决方案。 好吧，事情到这里就告一段落，目前顺利推进中，但是还是那句话，保持谦逊和谨慎，才能走的更远。 记录这些也是为了再次提醒自己。 好吧，用了500多字终于把引子写完了，作为笔者也是醉了。下面就来说说测试跟开发吧； 测试与开发在之前的思路中，原型跟文档往往我会留一些空间给开发，由他们能自己决定一些事情，比如在添加页面中，其中的一些判断，可以在输入后立即做判断，当然也可以在点击保存的时候统一进行检测。 这样开发能根据自己的情况选一种性价比最高的方式实现。在交付测试之前，我跟开发沟通一下，最终细化一下文档即可。 我完全忽视了一个问题，测试部门在开发部门辛勤耕作的同时，是要写测试用例的（虽然我到现在依旧认为测试用例不用这么早写，可能是我们公司的风格），这就意味着，我之前留给开发的那些事情，就不行了。测试需要一个确定的原型跟文档…. 于是在跟开发和测试沟通后，最终商定，所有文档跟原型都确定下来，开发尽量按照产品的思路来，如果有性价比低或者违背开发的习惯会及时跟我沟通。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>测试与开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[采用markdown撰写需求文档]]></title>
    <url>%2F2015%2F12%2F29%2Fprd%2F</url>
    <content type="text"><![CDATA[输出任何事物前，一定要明确受众范围，才能更好的有针对性的优化； 终于能坐下来继续写点自己的东西，那么就继续吧，写写文档，关于产品需求文档，网上一搜一大把，我这里就不再摆什么范文了. 就说说应该注意的技巧吧。 背景我所在的公司，技术大牛们用的都是mac book pro，所以就导致他们是不看office这一套在mac上水土不服的东西的，所以开始的时候他们是用mac原生的pages去打开，只能说惨不忍不睹。当然这里有朋友说可以用pdf输出给他们看啊。是的，这样也可以，但是我们得考虑方便技术大牛们标记不是。所以PDF也不是最优选择。 markdown所以在有针对性的搜索后，选择了用markdown格式输出，因为开发们也有用github，而且markdown格式的兼容性和拓展性非常好，可以用HTML语言进行标记，对开发来说简直是必备良药。 三原则一图一步骤，大纲，目录 这三点非常重要，别天真的以为技术大牛们会一字一句的去看你的文档，更别提去推敲了。所以我们必须要让文档简单易读并且易于定位。 首先一图一步骤就显的非常重要，比如关键字有「一目了然」「减轻阅读压力」「重点明显」。试想当我们自己拿到一个10,000字+的全文本文档，是不是也要爆了。 另外图片一定要做好标记，不能只能用「上图」和「下图」来表示； 然后就是大纲和目录了，如果是用word输出，这两个一个都不能少，我们作为产品经理，主要目的就是要让最终的产品开发按照我们最后的设计推进然后上线，一切阻碍进度的行为都是我们的敌人，所以方便开发第一时间找到自己需要的东西就显得尤为重要了； 如果是用markdown格式输入，那么大纲和目录可以合二为一； 阅读对象明确产品需求文档的阅读者 还记得短时间新人培训，让写一个O2O平台的需求文档，不少新人只写了不到1000字。完全当成说明书来写。这就是没有搞清楚产品需求文档的受众范围。 产品需求文档面对的是开发，测试和安全部门； 所以从小来说我们不仅要明确文本框和下拉框的区别，还要明确每个文本框是否有判断，有哪些判断。更要明确每个文本框下拉框背后的逻辑。 而从大来说，我们不仅要明确每个页面每个模块展示的东西，更要明确每个页面和模块中的逻辑； 这才是产品文档中应该包含的东西，而一份详细的文档，要对一个页面描述清楚，最低至少需要2000字以上。 所以后来看到新人的文档不到1000字的，直接按照0分处理了。更有甚者，做了一个类似58的O2O大平台，其文档竟然只写了令人发指的863个字。 个人认为，文档再详细也不为过。表格具体到每一列，图形展示具体到每一个曲线。总之，在文档里写的越周全，不仅分歧越少，而且自己的思路也会越清晰； 清晰在写之前，不妨自己先理出一个结构，然后根据这个结构输出，心里会更优底； 尾声到这里文档部分已经结束，再往后就是开发过程了，整个开发过程其实也是对原型和文档细节部分的一次洗礼；]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>需求文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12月18随笔]]></title>
    <url>%2F2015%2F12%2F18%2Fsuibi%2F</url>
    <content type="text"><![CDATA[引子本来今儿打算说点文档事情呢，结果今儿下午跟进会上，我负责的一些东西优先级调整了，所以得做些准备工作，下周继续开发状态，那么今儿我们就随便聊点什么吧，算是心得吧； 大数据 大数据-莱维斯-「预测给我们知识，而知识赋予我们智慧和洞见」 最近在搞大数据相关的东西，自己琢磨的。前两天自己搞了「关于XX的数据需求文档」，再次感慨下搞产品就是方便，想到的东西哗哗哗马上整理出个框架来，就跑去跟数据部门「谈心」去了。 数据部门表示内流满面，终于有产品开始关注他们了…. 然后就聊了一些他们工作的内容，还有一些建议。最后数据表示，只要想搞，随时配合，我都快觉得自己成上帝了…. 前两天对大数据有错误的认识，现在正在纠正中，等过两天在搞出点心得了，跟再来写写记记。 如果碰巧有看官了解这方面，不妨推荐点资料，在此先谢过了：） ps:发现Ulysses保存为md格式后，直接push竟然格式不兼容…还要在Typora中过一遍才行….囧]]></content>
  </entry>
  <entry>
    <title><![CDATA[2015我的第一篇博文]]></title>
    <url>%2F2015%2F08%2F12%2Fnew-article%2F</url>
    <content type="text"><![CDATA[我的第一篇博文，万事总得有个开始不是，千辛万苦搭建起来了，就这样开始吧！顺便试试格式：） //Format-storng Hello plywoody.com! //format-code $ hello plywoody.com! //format-emphasis hello plywoody.com! //format-strike Hello plywoody.com! //format-hyperlink Hello plywoody.com //format-image //format-superscript Let’s run! end~]]></content>
  </entry>
</search>
