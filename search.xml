<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[临时]]></title>
    <url>%2F2017%2F08%2F26%2Fnew-article%2F</url>
    <content type="text"><![CDATA[先占位吧，回头补充个点新看法]]></content>
  </entry>
  <entry>
    <title><![CDATA[计划]]></title>
    <url>%2F2017%2F08%2F25%2Fnew-article%2F</url>
    <content type="text"><![CDATA[这里讲对人生的计划。 第一次转折这是在工作1年以后出现的。刚从网络+单片机的工作中脱离，投入毕业后考研大军。第一次感觉到人生是无法计划的。 于是这个计划的时间从 人生 变为了 5年期； 第二次转折12年从上海转战到郑州，当然这只是质变的节点。我开始认识到，我应该操作不了5年的计划，但是当时却还带着一点固执。但是突然之间12年又买了房碰见了挚爱的媳妇。突然明白了。 于是这个计划的时间又从 5年期 变为了 2年期； 这时候我也认为，没人能够做到5年以上的规划，更别说一生的规划。因为变数太多，有些变数甚至大到能影响到你价值观的改变。 第三次转折从第二次转折得出结论以后，我就一直开始怀疑这个结论，虽然在新生培训时总是引用这个论证。终于在《把时间当做朋友》找到了一个答案； 长期计划是需要通过实践才能习得的能力。 短期计划为什么容易实现，是因为清晰，越是清晰的目标越是容易实现。比如今年我要拿下PMP证书，非常明确的目标。然后下面就可以进行动作拆解。当然短期计划肯定是要评估的，我说，我一年拿下CFA，肯定没人信了。评估也很重要。 所以做计划的时候，一定要提前思考2个问题：这个计划是否可行，这是个非常重要的前提。这个计划是否足够清晰，比如之前培训新人时问起过一个人，他说 这辈子我一定要出人头地]]></content>
      <categories>
        <category>生活碎碎叨</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零碎的积累-不断更新]]></title>
    <url>%2F2017%2F08%2F24%2F%E9%9B%B6%E7%A2%8E%E7%9A%84%E7%A7%AF%E7%B4%AF-%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[1. 如果要限制层级，比如子目录只限制三级，两种方案：在数据结构设计时，需要考虑如何向上查层级；前端做限制； 2. 一个动作牵扯到的其它动作比如把一个任务勾选完成，牵扯到的功能有，项目的统计变化，面板的统计变化，列的统计变化等等;这时候后端处理这些数据有限，前端处理会很负责；如果放前端，需要后端处理一遍，前端也会处理一遍，效率很低； 3. 产品设计与开发后的确认栗子1：在产品设计中有个最近更新的功能，设计时目的是有内容更新或新创建都会按照时间倒序显示到这里。但是开发后是不是这样的，需要测试，实测证明，更新显示非常不稳定。 4. 已删除与恢复之间的关联4.1 之前的逻辑删除看板列删除看板列时，任务逻辑删除放入回收站中看板只剩下一个看板列时，不允许删除，删除看板列时，如果回收站中存在有该看板列下的任务，则这些任务指定到看板的第一列中（如果删除的是第一列看板列，那么这些任务指定到剩余的看板列的第一列中) 删除看板删除看板时直接物理删除，此时删除看板列，看板，看板下的任务，回收站的与看板关联的任务一并删除 4.2 没有考虑到的情况是：如果按照上面图片中说明的处理列的删除，如果用户通过拖拽修改了第一列，那么需要同时修正回收站中这个看板下的任务。 4.3 应该怎么做：原列删除后，这这些任务与看板中列的对应关系删除，仅保留在哪个看板列，恢复的时候在与这个看板中的第一列建立指向关系； 5. 密码的强度管理密码的管理一定是优先考虑的内容，如果第一个版本因为最简版本上线，没有做密码强度管理功能，那就需要考虑对密码的特征做好标记，比如是否有大写字母，小写字母，特殊符号，数字。可以用0和1表示有和没有；假如没有考虑，当再次上线这个功能后，已有用户的处理就会很麻烦，让所有用户重置密码，一定是最糟糕的体验！特殊符号一定要设置规定：!@#$%^&amp;*_这样当再次上线密码管理功能时，现有的密码特征都在范围内，也好做管理；PS: 不限制的密码还可以输入汉字或者表情，比如😁； 6. 用sketch的一些心得：sketch做移动端原型效果最好，要善于使用现有的效果，比如图标去iconfont去找，微信框架去网上找等等； sketch图的摆放应该有条理性，按照业务线和逻辑关系来布局，可以参考知乎如下文章：sketch做的原型图，如何更好地展示交互逻辑关系？ 7. 混合数据的展示碰到的场景在加载一个任务时，由于分页展示的原因，前端首次从后端通过api请求了20条评论数据，20条活动数据（这个页面有三个选项，既可以单独显示评论，也可以单独显示活动，也能同时显示活动和评论）。这时候单独显示评论和活动都没有问题，按照时间轴排列下来。但是同时显示评论和活动就会有下列两个问题： 前端计算量大，由于有分页存在，需要按照时间轴对这些数据进行重新排列，而且只能显示前20条的数据。 多余数据的处理； 所以最后的解决办法是新加一个api，总体变更为： 页面条件是评论，后端api实现是查询评论列表 页面条件是活动，后端api实现是查询任务活动日志（不包含评论的活动日志） 页面条件是评论和活动，后端api实现是查询的任务活动日志，按时间轴倒序 8. 后端的设计后端在设计数据结构的过程中，会把很多功能设置的比较灵活，还是通过真实例子：在做产品设计过程中，每个人物选项卡的左侧，有颜色标记。作为产品可能需要考虑这个颜色是放出来让用户配置呢，还是让后台写死。正在犹豫的过程中，后端负责设计数据结构的同事来问这个功能在那里用的。于是我就把我的犹豫说了出来。他听后说，后端设计时需要尽可能的灵活，至于功能上的实现，则可以通过前端控制等其它方法考虑。但在设计数据如果就考虑写死，万一以后需要这个功能，就会变得非常棘手。 9. 讲解产品时一定要看听众是谁之前的经历整理出了产品操作流程图，给医院的大夫啊，护士啊去讲，结果我流程讲的是挺明白的。结果讲完一看台下众人，各个都是一脸懵逼，这时候我才意识到，与其给这些人将产品流程图（比如注册流程啊，制定计划流程啊什么的，谁关心这些….），不如给这些人讲讲为什么要做这个产品，这个产品有哪些优势都能解决什么问题。于是，我又重新写了ppt，不再按照怎么注册 患者怎么打卡 医生业务流程是啥这种思路来写。而是按照我们为什么要做这个产品，这个产品优势有哪些，这个产品的功能分别能解决哪些问题等等，这个思路来写。这样的话，至少大夫和护士还有院长知道这个功能能干什么，解决什么问题。当然如果要是面对程序猿，就要把功能点，流程图还有原型约束这些解释清楚，至于哪个功能能解决什么问题则是相对来说比较次要的问题了。 10. 关于角色的理解固定的角色更多的是方便前端和UI展示，包括用户的理解；在后端使用权限串，进行精细化控制，比如能控制到具体某个按钮。使用固化角色，就比较麻烦，比如一个人有A和B两个角色，就需要多次判断权限。 11. 手机端尺寸惠康第一版原型尺寸是按 640*1136，实际开发中由于 viewport 禁用缩放，一般使用逻辑像素值开发。现在新出的手机基本都是 1080*1920 分辨率，这个是物理像素，逻辑像素为 360*640，dpr 缩放比为 3。所以具体的应用数值要进行等比换算。如 30px 可以计算为 30 * 360 / 640 = 16.875px。 12. 组件的复用及一致性碰到的场景，在一个用户主页，是开发人员A负责，UI展示中，第一个页面有border，第二个页面没有border，原型中又没有特殊标注，所以开发人员统一了风格，都有border（边框）。 同时A开发人员还把它做成了组件，提供给B开发人员使用。但是B开发人员的UI图却没有border，所以B开发人员拿到组件后，开始做去掉border的工作。 多余的工作量就是这么产生了，一个有一个累计起来，无效工作所浪费的时间就非常可观了； 得到的启示： 一致性与独立性区分开，多注意细节。比如当第一个页面有border时，需要考虑后面的页面是否要延展这种风格。如果不延展，需要标注。让延展性成为一种习惯，而不是让独立性成为一种习惯。 不能矫枉过正，比如面对不同用户，一些风格变化也是必须的。 13. 标签联动的情况有些场景是需要标签联动的情况，比如下图： 用户反映在实际使用过程中上图并不能很好的展示出这种联动关系，虽然用了颜色区分。所以我们加强了这种区分； 这样，视觉上就会很明确； 当有关联时，需要在UI上考虑强化这种关联，一眼就能看出来这种关联。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>积累</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生不逢时和与时俱进]]></title>
    <url>%2F2017%2F08%2F21%2Fnew-article%2F</url>
    <content type="text"><![CDATA[避免生不逢时今天跟老大讨论了下前两天的观点。老大从下面三个角度来反驳： 文档归档不正确，有些迭代会贯穿整个项目集合，就算归档了项目，这个文档也不能归档； 之前tello曾经试过自由化的方案，国内用户骂声很厉害，这说明教育用户的成本过高； 模块化的思路是个方向，但是模块化指的是完整功能的模块化，比如自定义字段模块，审核模块等，企业需要哪些模块可以加载哪些模块； 回来找了下trello的新闻，没有找到。但是这个结论还是符合预期。虽然当前社会接受新事物很快，但是要区分用户群体。协作软件这种一旦用起来就必须团队内部普及的类型，学习成本过高，形式过于跳跃，碰到的阻碍会更大，“生不逢时”总是用于形容失败者。 如何与时俱进没错，如你所想，所有的需求都是从用户中来，回到用户中去，太空洞，具体可以从以下几个地方细化。 打通功能这是我老大之前说过一个观点唯物辩证法的观点：事物都是联系的。既然接受不了自由，那我们的方向就调整成让所有的关系具象出来； 比如A任务的产出是文档，则立刻能定位到该文档，甚至是这个任务完成时（归档时）对应的某个版本； 是功能与功能之间的打通； 强化统计统计要分角色，不同的角色关注的点会有不同；任务执行角色主要关注“我”相关的任务，包括进度上与我关联的任务，例如某人完成后我才能开始；管理角色主要关注项目进度，顺利还是阻塞，以及成员的负载情况。 所以统计也要从这两个角色入手，有针对性的设计； 强化搜索全最重要，哪怕不能提供一个集中的搜索，也要提供各个区块的搜索入口。 定位清晰个人认为，软件最怕大而全，想凭一个吃遍一个行业。这个时代早已过去，现在唯有不断的精细化目标用户，纵深发展，才能在这个早已没有死角的竞争中突围。 结尾文中太多地方都没有细化，在日后的工作中，会不断丰富案例，做好自己的原始积累。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7座车到底是不是一个伪需求？]]></title>
    <url>%2F2017%2F08%2F20%2Fnew-article-1%2F</url>
    <content type="text"><![CDATA[先说我的看法 以前我不知道是不是，但是现在应该是了 我这是有心里历程的。 下一辆车要7座的因为有了要二胎的打算，所以自然而然的开始留意起7座的车。 要不坐不下啊，您说是吧！ 夏朗太挤了，汉兰达过于庞大，GL8挺好，恩，五菱宏光也可以考虑，耐造啊！ 小叔家的7座车回老家看到小叔家的7座车，仔细观摩了一下，还专门到后排体验了下，真棒！安全座椅的接口留的也很充分。最后一排椅子放下都可以睡人了，一切都很完美！ 我无意中问到 这一家人出去玩可方便了。 小叔也随口说 没开几次，就带着你爷爷奶奶一起出远门的时候用用，平时还是开那个小破车，这玩意太大。 说者无心，听着有心。我突然开始思考此时此刻7座车到底是不是定势思维，家里增加一个成员，车上就要增加一个位置么？？ 还是考虑5座的？到底什么时候会用到7座的车呢。 用户我们首先说当需要7座的时候，谁坐车，也就是用户； 首先是家庭就像我小叔说的，只有全家总动员时，才会用到7座车。那这个全家肯定是有父母，有孩子，再加上我们两口子。我们双方父母都不是很喜欢自驾往外跑着玩，就算外出，也是一起回老家的时候才会自驾，但是回老家也没有出省，区区200多公里。 其次是亲朋好友朋友们多的时候一辆车，这个是李同学臆想出来的场景，他自己没碰到过。就我而言，有朋友聚的时候，我们几辆车从来没有说坐不下的，唯一一次是我们只有一辆车，于是我们纷纷都打的去往目的地了。好吧，我们就假设要去机场接6个朋友。那就是下一个维度：频率 频率我们还是按照家人出游和朋友的维度来说；我们全家回老家每年也就一次，好吧，2次不能再多了…去机场接6个朋友，按照我们聚会的频率来说，一次也不能再多了..所以一年里用的上7座车的时候只有3次，算上一些临时起意的情况，5次不能再多了。 结论一年5次左右的用车频率，的确入手7座车的性价比不高。入手成本高，耗油，维修成本高，说不定平时要用车时还得掂量掂量值不值得开。 那全家人出游时咋整？ 周末城市内游玩的话，共享汽车就已经能满足了，停车还不收费，当然这个可能还要做些规划；如果出远门回老家的话，直接租车好了，方便快捷。 其实写到这里我有些明白为什么像夏朗或者途锐L这种车的第三排做的那么挤。从产品的角度来说，是一种平衡，既能满足偶尔的7座要求，也能最大程度的减小车重和车的体积，从而保证必要的省油和灵活性。隐隐有些佩服这些车的产品经理，调研的非常到位。 所以7座车到底是不是个伪需求，我也说不准，但是买个大排量大空间的7座车，我应该会后悔，我通勤总不能开个GL8或者汉兰达去吧！所以我倒是认为，如果真要7座车，不妨可以考虑一下类似夏朗或者途锐L这种提供7座的选择，但是也兼顾了省油和灵活性的车型。 生活处处有思维定势，勤思考才能知道我们到底要什么。 增加了一个家庭成员，不代表车上一定要加个座位。]]></content>
      <categories>
        <category>生活碎碎叨</category>
      </categories>
      <tags>
        <tag>7座车</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目管理方法与软件-好友带来的思考]]></title>
    <url>%2F2017%2F08%2F19%2Fnew-article%2F</url>
    <content type="text"><![CDATA[好友的误解昨天文章发给好友，他说写的不错，但是不认同。 因为项目管理流程，其实是一个国际通用的一个类似于标准化的流程，各个公司之间，大家其实用的标准都一样，那等于是我的项目过程进度发给你的话，你也是能看懂的。那如果按你的思路的话，等于是大家每个都是个性化的东西，完全打破了这个标准化的东西，我觉得会有问题。 当时我第一反应是没有理解我表达的，我文中所说的自由，只不过是对任务、文档定义和管理上的自由。 不过我也没有急着去解释，因为我在想，为什么会有这样的回复。 误解的原因再次通读下来，我发现在文中混淆了几个概念。 企业管理； 项目管理； 协作管理； 恍然，难怪好友会有这番表述。 企业管理与项目管理之间的关系是正向选择，于项目管理来说，企业需要选择哪种项目管理方式。如好友所说项目管理是标准化的一种流程，无论是瀑布管理，还是敏捷管理，都是有一套完整的理论指导，所以会有我的项目过程进度发给你的话，你也是能看懂的这种说法。 展开说说直接从协作管理的角度来说吧。协作最终落实到的是任务； 管理者拆解和分配任务（也可能是由执行者申领任务） 执行者领取任务并执行任务； 至于说文档，API等这些，也是具体一个个任务的结果。所以说协作根本上是任务的协作。从这个根本点出发，才出现了众多功能，比如任务管理，文档管理，API管理，网盘管理，甘特图，燃尽图，消息管理，组织管理，审批管理等等； 企业管理中的考核最终也会落实到任务上，所以不同企业对任务的管理形式会有不同。 比如一些公司重视工时运用，以此来做统计分析，跟进每个过程组的状态，或超前或滞后。项目超前奖金多多； 有些公司却不注重这些，采取多人竞争的方案，我只限制负责人和任务的最后期限，其它通过竞争解决。凭最终结果积累奖金； 而对项目管理流程来说，上面说的这些影响却很小。协作管理是为了更好的完成项目管理，或可以粗暴的说是项目管理的过程控制。同时也能落实企业管理的意志。 在之前一篇文章，我所想表达的其实是协作管理的看法。 回到自由与固化通过好友这一说和一想 ，思路显得更清晰一些了。teambition，asana等软件虽然在宣传过程中会提到项目管理，但实际都是从协作管理的角度出发。通过高效的协作管理，来达到优质的项目管理。至于说如何高效的协作管理，也就是上一篇我表达的自由与固化的度的控制。 在现在的协作软件已经逐步向自由化发展，虽然大家都小心谨慎（也许是尾大不掉）。 一个项目下可以创建不限量的看板； 看板列可以自定义名字，也不限制数量； 自定义字段功能，可以对在原有属性定义的基础上，扩展新的属性定义； 可以拉小圈子做部门内或者圈子内的的文档管理； 一个任务也可以出现在多个项目中； …… 就像我上文所解释的，任务才是协作管理的根本。 是不是可以做如下思考： 任务所有属性都是自定义字段，当然我们可以预置一些字段，比如负责人，起止时间，标记颜色等； 在目前的协作软件中，强行把文档和API从任务中分离作为一个独立的模块是否本身就是一种一直妥协的结果。文档，API本身也属于任务的一部分。从项目归档的角度来说，文档和API也应该是归档的一部分。 搜索和筛选需要设计到位。 结尾想要跳出现在这种定势思维又谈何容易，就在刚刚，我还在想文档如果使用任务管理中看板，看板列，标签，标记等等手段来实现。依旧在是固化的圈圈，好在我不是悟空，定势思维也不是如来。 打破传统，大胆假设，小心求证！]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>协作软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目管理软件自由与固化]]></title>
    <url>%2F2017%2F08%2F18%2Fnew-article%2F</url>
    <content type="text"><![CDATA[项目管理软件上，我一直在考虑固化和自由的优缺点。 现状关于任务选项目前项目管理软件是无论是任务还是文档，都是固定的。 特别是任务。早期的任务卡只有固定的选项，比如负责人，参与人，起止时间等，用户只需要在对应的属性上选选选就可以。 后来随着用户需求的变更，很多用户开始需要可以针对自己企业的情况来自定义任务的选项。于是开始演变出了自定义字段功能，用户可以自己增加任务的定义。 在这个过程中，有些企业也尝试对现有的一些固定属性，模糊它的用法； 比如国外的一些管理软件对任务可以标记1-5个点;再比如还可以对任务标记不同颜色； 这些都是灵活定义的，A公司可以把1-5个点认为是任务完成度，B公司可以把1-5个点认为是任务优先级等等场景。 关于任务的展示任务的展示也是两种极端； 方向一有的管理软件把任务所有的属性都列出来，不管这个任务有没有定义； 方向二有的管理软件则仅仅显示已经定义的属性； 当然更多的管理软件则是寻求两个方向的一个平衡点。 开源的影响随着互联网技术发展越来越成熟，变革越来越快，开源的项目也越来越多，会逐步覆盖到各个行业，项目协作软件也一定会从现在的零星几个，再到百花齐放的境地。毕竟现在互联网，已经不再是单纯的靠产品本身这种单一的盈利模式。SaaS，流量，数据本身都可以成为盈利的主要途径。 趋势回到正题，我们再说说固定与自由。notion是自由的极端形式，一张白纸，十几个模块，可以拼成几乎所有的场景。 与此呼应的，恰恰是传统的管理软件的固化； 固化的任务定义；固化的任务属性；固化的文档定义； 互联网发展到至今，在硬件方面成为瓶颈时，宽度将迅速铺开，AI技术开始全面尝试铺入各个行业，VR/AR技术的不断成熟，都将促成这一过程。直到基础硬件有突破性发展。 而在这个过程中，商业模式和企业运作模式也将变得越来越灵活，多样性。所以这种固化的劣势将会越来越明显，会被时代淘汰； 展开说下吧以下详细来说说，也可以跳过 比如亲身经历的需求，15年年底时，我所在的公司变更考核方式，采取自己领取任务的方式，而且一个任务可以被多个人领取，每个人可以完成自己的任务，最后评审，采纳谁的方案，谁就可以获得积分，以此累加，年终计算奖金。 这种模式在后来跟很多小伙伴谈起时，他们都表示难以置信。 这不是浪费资源么！？ 这就是认知的差异，存在就是合理的。 其实这只是内部竞争机制的一种体现，类比如腾讯有QQ，微信，现在又有了TIM。那用我们固有的思维是不是可以认为既然有了QQ，为啥还要有微信，还要有TIM。明显腾讯用实际行动已经回答了我们。 再说这个需求本身。 这样的需求容易满足么，当时市面上没有一款软件满足，我们当时跟一直使用的项目管理产品开发者反馈了很久，结果用了半年的时间才上线。而我们早已弃用。 通过这个是不是可以发散一下 假定我刚才说的是A需求，那么B企业是不是会有B需求，C企业有C需求…..以此类推； 所以说现有的项目管理软件，是按照自己对任务的定义，来做项目管理软件，把开发者对任务的定义灌输到产品中。 在上线后通过不断运营，来得到反馈，但在得到反馈后，怎么处理又是一个头疼的问题，全盘吸取肯定不行。只能进行筛选，有筛选就有认知的缺陷，会砍掉很多认为小众的需求。留下的需求要进行抽象，以便让这个功能能够适用性更广泛。 在以后，项目管理工具类软件的小众需求会越来越多，原因我上文提过，企业的内部管理，盈利模式都会越来越自定义化。 以上展开部分的总结到此，啰啰嗦嗦了这么多，其实是想说，项目管理软件发展至今，已经出现了如下几个趋势： 重搜索，强大到令人发指的搜索； 重统计，对项目的统计，比如燃尽图，甘特图，任务统计等； 轻规则，比如取消任务及文档的界限 谁也没有规定任务一定是任务，文档一定是文档对吧，再比如每个任务属性的自定义等等； 难点 自由与固化的界限 过于自由会导致用户的学习成本过高； 过于固化会导致无法满足用户的个性化场景； 中间的度如何把握，确实非常困难，下半场的竞争，应该也是竞争到这个“度”上； 目前我大概只有两个方向性想法： 这个度至少70以上是偏向自由化的； 灵活使用降低学习成本的方法，包括用户指引，包括模板创建等等； 结尾一家之言，认知局限，希望得到大家的反馈和指正。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UI会谈结果]]></title>
    <url>%2F2017%2F08%2F15%2Fnew-article%2F</url>
    <content type="text"><![CDATA[老歌越来越少了，版权限制很是苦恼；下午跟UI就昨天的问题谈谈；还是沟通的问题。最终决定使用Flinto来做交互。不过对效果保持怀疑，可以先试试看。正好趁着这个机会从下面几个角度跟她谈谈理想： 透过现象看本质，对于形式上，一个可能只是一个图标，但是这个图标背后可能会牵扯很多逻辑。 交付；交付是个流程，而不是一个动作。完成的工作，当交付给下一个人时，一定要确保对方是否接收，接收的效果如何，是否还有改进或错误需要更正的地方。 产品与功能区别。不要随便加功能，尽量最小版本上线，聆听用户的声音。功能在小做好了就是一个产品，比如验证做好了就是极验验证，评论做好了就是微博，聊天做好了就是QQ等等。 个人工作管理。忘事情谁都避免不了，但是放任这种情况不管就有问题。适当借助GTD如OMNIFOCUS或者协助类软件如easyPM等记录和规划，会好很多。如果团队都在用就更好了，别人能随时跟进状态； 要理解业务，只有对业务理解了，才能正确的把握功能，从而制作正确的交互和UI； 了解一些目标人群，30岁的人和50岁的人总是有很大不同的，虽然UI和UX都不用对用户研究的非常透彻，但是多少也要了解一些，对症下药才有可能匠心。 认同这个产品，干一行爱一行，如果仅仅把眼下的工作当做工作，那这份工作的回报也仅仅就是一份工作。但是如果把眼下的工作当做自己的产品，就会变得负责起来，就像你会给你的手机买很多漂亮的手机套一样（这不等于all in）。 这里没有展开写，只是从上面几个角度来谈谈感受。毕竟刚毕业的学生不可能一下子做到很好。只是希望她自己能快速成长吧，社会很残酷。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理与UI]]></title>
    <url>%2F2017%2F08%2F14%2F%E4%BA%A7%E5%93%81%E4%B8%8EUI%2F</url>
    <content type="text"><![CDATA[我真的有很多次问过自己，是不是我过于苛求了。我还没有找到和UI高效相处的工作方式；在我们公司，UI和我一起负责交互问题，一般情况下，除非我有非常好的想法，我很注重让UI发挥。 目前存在最大的问题是： UI最终交付出来的总是漏东西； 我为此也做了一些努力，比如我把所有要素都用草图的形式画在axure上，但是结果不是缺个按钮，就是缺少描述。 下午竟然还多了个组件，在搜索框后面添加了一个加号，要不是我一个一个排查，这又得被开发撵着问，这个加号是干啥的。 说实话，我内心是崩溃的。 但是又找不到解决途径，打算跟她谈一谈，又不知道从何说起； 我做了如下努力： 跟她讲解的时候，采用用户故事的方式，让她理解这里的需求是什么。 有新页面时，我先出Axure图，她来出UI和一些交互； 交付后我审核时，凡是有问题的界面，我都会一图一描述一任务的建立在工具软件上。 我直接上手改一部分； 我认为我们还是沟通，我打算考虑考虑跟她好好谈谈，让她多发言，希望从她的角度来说说该如何改进。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发整体交付与局部交付]]></title>
    <url>%2F2017%2F08%2F14%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BA%A4%E4%BB%98%E4%B8%8E%E5%B1%80%E9%83%A8%E4%BA%A4%E4%BB%98%2F</url>
    <content type="text"><![CDATA[通勤路虽远，好在可以看看书。敏捷开发是把一个整体的可交付产品，分拆为一个个可交付产品包。 软件项目被划分为多个相互联系但也能独立运行的子项目； 举个栗子，比如一个产品有任务管理，文档管理功能，那么第一次交付任务管理，第二次交付文档管理，第三次交付任务与文档的关联。 再加上每个迭代的周期是1-4周，可以对上面进行二次甚至三次拆解； 但是需要注意，在计划每个迭代时，最终目标都是有可以发布的产品。这就要求在每个迭代中都有产品设计，开发，测试一个完整的流程，保证产品发布的可靠性；]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《轻松Scrum之旅-敏捷开发故事》有感]]></title>
    <url>%2F2017%2F08%2F12%2Fnew-article%2F</url>
    <content type="text"><![CDATA[1. 亡羊补牢为时不晚当已经发现知识跟不上生产力时，就要赶紧充电。老大说《时间的朋友》阐述了一个观点，人的思维是发散的，所以眼下的“无用知识”只不过缺少一个引爆点。人的认知是在不断积累的。 2. 敏捷管理最近开始看《轻松Scrum之旅-敏捷开发故事》。上一次接触scrum还是在PMP培训的时候，当时就对敏捷管理很感兴趣，遗憾的是里面只是简单的介绍，而在实际项目中也采用的瀑布流，所以一直没有实战的机会。自然也谈不上对scrum的了解。 2.1 几个重点 有明确的最高目标：发布产品； 每个Sprint都能看到实际的交付成果。 user story公式：作为&lt;某个角色&gt;，我可以&lt;做什么&gt;，以完成&lt;什么目的&gt;; 版本待办事项Sprint Backlog，用户故事User Story，任务task；其中 User Story 的度量方式：Story Point（人/日），理想状态下，一个人一天能够完成的工作量； 2.2 递进关系Sprint Backlog 拆解成User Story，每个User Story拆解成task；最后的task一定要细分到可以执行可以度量的；否则应该继续细分； 2.3 关于任务工时的看法很多人认为最难的是任务工时估算是最难的地方；包括我之前也这么认为；但是敏捷开发的思想在于监控和调整；比如当发现燃尽图持续横盘时，就应该考虑是否是任务拆解不够，或者工时估算有误，或者是执行人主观问题；从而对整体进度进行快速调整；这应该是一个动态过程，所以不用一开始就强调准确性；在这种执行到反馈到review的过程中，工时估算也就会越来越准确； 2.4 任务的状态未完成,被阻塞,进行中,已完成；敏捷管理将task分为这四种状态；管理者能够清晰看到当前每个人的工作任务； 作为敏捷管理软件，也应该围绕这个维度来进行展示和管理； 3. 结尾书看了2/3，结合工作，自己还是有很多疑问；比如story的Story Point和任务的工时怎么做对应，还是比较困惑。]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>敏捷</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试与开发的平衡]]></title>
    <url>%2F2016%2F01%2F08%2F2016-1-8-some-up%2F</url>
    <content type="text"><![CDATA[引子最近涨了薪，提了干，做了新人培训，年关之前貌似一切都预示着2015年是个丰收年。 不过好在多年的工作经验已经对人生的这套把戏非常熟悉 福祸相依 越是看似美好的时候，就离危险越近； 保持谦逊和谨慎，是个良好的习惯，如果再能有一些危机感，那就更好了。 于是我把所有手头上的任务或者项目一个一个过了一遍，填填补补了不少漏洞，才稍微心安了一些。 果然，这两天就碰到了危机，服务器的开发遇到了阻塞，我跟php主管讨论了3次，每次都在40分钟以上，最后汇报给了需求方，由需求方最后做了定夺； 说起来好像平淡无奇，但是大家都知道越凶险的事情往往描述起来就越平淡。 如果这个阻塞解决不了，就意味着服务器部分的模块需要重构，而作为整个系统基石的服务器模块，如果重构将意味着整个项目都阻塞了，主营业务啊。 现在回想起来依旧心有余悸，如果之前不是自己把手头每个项目都认真的理了一遍，就不可能快速对这次阻塞反应，提出可能的解决方案，并在讨论的时候准确的根据之前准备好的异常案例，否了几个会上提出的看似能走通，实则更多坑的方案。 最终商定了一个可以落地的解决方案。 好吧，事情到这里就告一段落，目前顺利推进中，但是还是那句话，保持谦逊和谨慎，才能走的更远。 记录这些也是为了再次提醒自己。 好吧，用了500多字终于把引子写完了，作为笔者也是醉了。下面就来说说测试跟开发吧； 测试与开发在之前的思路中，原型跟文档往往我会留一些空间给开发，由他们能自己决定一些事情，比如在添加页面中，其中的一些判断，可以在输入后立即做判断，当然也可以在点击保存的时候统一进行检测。 这样开发能根据自己的情况选一种性价比最高的方式实现。在交付测试之前，我跟开发沟通一下，最终细化一下文档即可。 我完全忽视了一个问题，测试部门在开发部门辛勤耕作的同时，是要写测试用例的（虽然我到现在依旧认为测试用例不用这么早写，可能是我们公司的风格），这就意味着，我之前留给开发的那些事情，就不行了。测试需要一个确定的原型跟文档…. 于是在跟开发和测试沟通后，最终商定，所有文档跟原型都确定下来，开发尽量按照产品的思路来，如果有性价比低或者违背开发的习惯会及时跟我沟通。]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>测试与开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[采用markdown撰写需求文档]]></title>
    <url>%2F2015%2F12%2F29%2Fprd%2F</url>
    <content type="text"><![CDATA[输出任何事物前，一定要明确受众范围，才能更好的有针对性的优化； 终于能坐下来继续写点自己的东西，那么就继续吧，写写文档，关于产品需求文档，网上一搜一大把，我这里就不再摆什么范文了. 就说说应该注意的技巧吧。 背景我所在的公司，技术大牛们用的都是mac book pro，所以就导致他们是不看office这一套在mac上水土不服的东西的，所以开始的时候他们是用mac原生的pages去打开，只能说惨不忍不睹。当然这里有朋友说可以用pdf输出给他们看啊。是的，这样也可以，但是我们得考虑方便技术大牛们标记不是。所以PDF也不是最优选择。 markdown所以在有针对性的搜索后，选择了用markdown格式输出，因为开发们也有用github，而且markdown格式的兼容性和拓展性非常好，可以用HTML语言进行标记，对开发来说简直是必备良药。 三原则一图一步骤，大纲，目录 这三点非常重要，别天真的以为技术大牛们会一字一句的去看你的文档，更别提去推敲了。所以我们必须要让文档简单易读并且易于定位。 首先一图一步骤就显的非常重要，比如关键字有「一目了然」「减轻阅读压力」「重点明显」。试想当我们自己拿到一个10,000字+的全文本文档，是不是也要爆了。 另外图片一定要做好标记，不能只能用「上图」和「下图」来表示； 然后就是大纲和目录了，如果是用word输出，这两个一个都不能少，我们作为产品经理，主要目的就是要让最终的产品开发按照我们最后的设计推进然后上线，一切阻碍进度的行为都是我们的敌人，所以方便开发第一时间找到自己需要的东西就显得尤为重要了； 如果是用markdown格式输入，那么大纲和目录可以合二为一； 阅读对象明确产品需求文档的阅读者 还记得短时间新人培训，让写一个O2O平台的需求文档，不少新人只写了不到1000字。完全当成说明书来写。这就是没有搞清楚产品需求文档的受众范围。 产品需求文档面对的是开发，测试和安全部门； 所以从小来说我们不仅要明确文本框和下拉框的区别，还要明确每个文本框是否有判断，有哪些判断。更要明确每个文本框下拉框背后的逻辑。 而从大来说，我们不仅要明确每个页面每个模块展示的东西，更要明确每个页面和模块中的逻辑； 这才是产品文档中应该包含的东西，而一份详细的文档，要对一个页面描述清楚，最低至少需要2000字以上。 所以后来看到新人的文档不到1000字的，直接按照0分处理了。更有甚者，做了一个类似58的O2O大平台，其文档竟然只写了令人发指的863个字。 个人认为，文档再详细也不为过。表格具体到每一列，图形展示具体到每一个曲线。总之，在文档里写的越周全，不仅分歧越少，而且自己的思路也会越清晰； 清晰在写之前，不妨自己先理出一个结构，然后根据这个结构输出，心里会更优底； 尾声到这里文档部分已经结束，再往后就是开发过程了，整个开发过程其实也是对原型和文档细节部分的一次洗礼；]]></content>
      <categories>
        <category>产品经理</category>
      </categories>
      <tags>
        <tag>需求文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12月18随笔]]></title>
    <url>%2F2015%2F12%2F18%2Fsuibi%2F</url>
    <content type="text"><![CDATA[引子本来今儿打算说点文档事情呢，结果今儿下午跟进会上，我负责的一些东西优先级调整了，所以得做些准备工作，下周继续开发状态，那么今儿我们就随便聊点什么吧，算是心得吧； 大数据 大数据-莱维斯-「预测给我们知识，而知识赋予我们智慧和洞见」 最近在搞大数据相关的东西，自己琢磨的。前两天自己搞了「关于XX的数据需求文档」，再次感慨下搞产品就是方便，想到的东西哗哗哗马上整理出个框架来，就跑去跟数据部门「谈心」去了。 数据部门表示内流满面，终于有产品开始关注他们了…. 然后就聊了一些他们工作的内容，还有一些建议。最后数据表示，只要想搞，随时配合，我都快觉得自己成上帝了…. 前两天对大数据有错误的认识，现在正在纠正中，等过两天在搞出点心得了，跟再来写写记记。 如果碰巧有看官了解这方面，不妨推荐点资料，在此先谢过了：） ps:发现Ulysses保存为md格式后，直接push竟然格式不兼容…还要在Typora中过一遍才行….囧]]></content>
  </entry>
  <entry>
    <title><![CDATA[2015我的第一篇博文]]></title>
    <url>%2F2015%2F08%2F12%2Fnew-article%2F</url>
    <content type="text"><![CDATA[我的第一篇博文，万事总得有个开始不是，千辛万苦搭建起来了，就这样开始吧！顺便试试格式：） //Format-storng Hello plywoody.com! //format-code $ hello plywoody.com! //format-emphasis hello plywoody.com! //format-strike Hello plywoody.com! //format-hyperlink Hello plywoody.com //format-image //format-superscript Let’s run! end~]]></content>
  </entry>
</search>
